En este lab corrimos los algoritmos con un array predefinido de un tamaño corto y arrays creados aleatoriamente
de tamaño 100, 1000, 10000.

En el primer array como son pocos elementos el más rápido es el InsertionSort, seguido del QuickSort y de último
el MergeSort.

Para 100 Elementos el QuickSort es el primero, seguido del InsertionSort y de último el MergeSort con una diferencia
mínima entre el QuickSort y el InsertionSort.

Para 1000 elementos el primero es el MergeSort y seguido el QuickSort el tiempo de diferencia es casi despreciable
y de último el InsertionSort con un tiempo de diferencia bastante considerable.

Para 10000 ocurre lo mismo que para 1000.

Sabemos que la complejidad del MergeSort en el mejor caso es O(nlogn) y la complejidad del Insertion es O(n^2) en el
mejor de los casos. Para el QuickSort se tiene que en promedio es O(nlogn) por lo que se puede decir que por esa razón
alcanza la complejidad del Merge. En el peor de los casos es 0(n^2) entonces en casos promedios los tiempos de ejecución
serían MergeSort, QuickSort e InsertionSort.


